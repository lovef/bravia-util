#!/usr/bin/env bash

function usage {
    echo "usage: bravia [<options>] [command]"
}

function help {
    usage
    echo "
Utility for controlling a Bravia TV via REST
https://pro-bravia.sony.net/develop/integrate/rest-api/spec/index.html
Based on https://github.com/alanreid/bravia

Run without options to turn on and selecting preset input

Options:

    -h, --help                      Show this help text
    -i, --input                     List inputs
    -i, --input <input URI>         Select preset input
    -t, --toggle                    Toggle to the preset input or turn off depending on current state
        --script                    User will not be promted for further input
    -l, --list                      List commands"
}

expandedArgs=()
while test $# != 0
do
    arg="$1"
    if [[ "$arg" =~ ^-[a-z]{2,}$ ]]; then
        for (( i=1; i<${#arg}; i++ )); do
            expandedArgs+=("-${arg:$i:1}")
        done
    else
        expandedArgs+=("$arg")
    fi
    shift
done

cd "$(dirname "${BASH_SOURCE[0]}")/../libexec/bravia"
if [[ ! -d config ]]; then
    echo create config dir
    mkdir config
fi

# Commands: https://pro-bravia.sony.net/develop/integrate/ircc-ip/ircc-codes/index.html
commandList=()
for (( i=0; i<${#expandedArgs[@]}; i++ )); do
    arg=${expandedArgs[$i]}
    case "$arg" in
    -h|--help)
        help
        exit 0
        ;;
    -l|--list)
        ./list
        exit 0
        ;;
    -i|--input)
        i=$((i + 1))
        uri="${expandedArgs[$i]}"
        if [[ -z $uri ]]; then
            ./input
        else
            echo "Preset $uri"
            echo -n "$uri" > config/preset
        fi
        exit 0
        ;;
    --toggle)
        echo "Toggle mode"
        toggle=true
        ;;
    --script)
        echo "Script mode"
        script=true
        ;;
    *)
        list=$(./list) # Ensure list is read
        command=$(./list | egrep -m1 "^$arg *\=" | sed -E "s/[^=]+\= *//")
        commandList+=($command)
        ;;
    esac
done

source access $script

# https://pro-bravia.sony.net/develop/integrate/rest-api/spec/index.html

function executeCommand {
    echo "execute $1"
    result=$(curl "$ip/sony/ircc" \
        --header 'SOAPACTION: "urn:schemas-sony-com:service:IRCC:1#X_SendIRCC"' \
        --cookie "$cookie" \
        --silent \
        --output /dev/null --write-out "%{http_code}" \
        --data '
            <s:Envelope
                xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"
                s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
                <s:Body>
                    <u:X_SendIRCC xmlns:u="urn:schemas-sony-com:service:IRCC:1">
                        <IRCCCode>'"$1"'</IRCCCode>
                    </u:X_SendIRCC>
                </s:Body>
            </s:Envelope>')
            # || { echo 'Could not execute command' ; exit 1; }
    if [[ $result -ne 200 ]]; then
        echo 'Could not execute command'
        exit 1
    fi
}

if [ ${#commandList[@]} -gt 0 ]; then
    for command in "${commandList[@]}"; do
        executeCommand $command
    done
    exit 0
fi

function currentInput {
    curl --silent "$ip/sony/avContent" \
        --cookie "$cookie" \
        --data '{
        "method": "getPlayingContentInfo",
        "id": 103,
        "params": [],
        "version": "1.0"
    }' | jsonString uri
}

function setCurrentInput {
    echo "Set $1"
    curl --silent "$ip/sony/avContent" \
        --cookie "$cookie" \
        --data '{
        "method": "setPlayContent",
        "id": 101,
        "params": [{"uri": "'"$1"'"}],
        "version": "1.0"
    }' | jsonString uri
}

powerStatus=$(curl --silent "$ip/sony/system" \
    --data '{
    "method": "getPowerStatus",
    "id": 50,
    "params": [],
    "version": "1.0"
}' | jsonString status)

turnOff=$toggle

if [[ $powerStatus != "active" ]]; then
    echo Wake up
    executeCommand AAAAAQAAAAEAAAAuAw
    shouldExit=true
    turnOff=false
    sleep 1
fi

if [[ -f "config/preset" ]]; then
    preset=$(cat "config/preset")
    input=$(currentInput)
    if [[ "$preset" != "$input" ]]; then
        setCurrentInput "$preset"
        end=$((SECONDS+13))
        while [ $SECONDS -lt $end ]; do
            echo "monitor input..."
            sleep 3
            input=$(currentInput)
            if [[ "$preset" != "$input" ]]; then
                setCurrentInput "$preset"
                exit 0
            fi
        done
        shouldExit=true
        turnOff=false
    fi
fi

if [ "$turnOff" == true ]; then
    echo "Turn off..."
    # Execute power off command twice since it often takes two tries
    executeCommand AAAAAQAAAAEAAAAvAw==
    executeCommand AAAAAQAAAAEAAAAvAw==
    exit 0
fi

if [ "$shouldExit" == true ]; then
    exit 0
fi

if [ "$script" == true ]; then
    echo "Script mode, exit"
    sleep 3
    exit 0
fi

list=$(./list) # Ensure list is read
echo "loading commands..."
home=$(./list | egrep -m1 "^home *\=" | sed -E "s/[^=]+\= *//")
enter=$(./list | egrep -m1 "^dpadCenter *\=" | sed -E "s/[^=]+\= *//")
exit=$(./list | egrep -m1 "^exit *\=" | sed -E "s/[^=]+\= *//")
up=$(./list | egrep -m1 "^up *\=" | sed -E "s/[^=]+\= *//")
down=$(./list | egrep -m1 "^down *\=" | sed -E "s/[^=]+\= *//")
left=$(./list | egrep -m1 "^left *\=" | sed -E "s/[^=]+\= *//")
right=$(./list | egrep -m1 "^right *\=" | sed -E "s/[^=]+\= *//")
echo "done"

function readKey {
  allInput=""
  while :; do
    read -rsn1 input
    if [[ $input == $'\e' ]]; then
      read -rsn1 -t 0.001 input2 # get 1 more character
      input+="$input2"
    fi
    if [[ -z "$input" ]]; then
      echo enter
      return
    elif [[ ! -n "$allInput" && $input =~ [a-zA-Z0-9] ]]; then
      echo $input
      return
    fi
    allInput+=$input
    case $allInput in
      *[A) echo up; return ;;
      *[B) echo down; return ;;
      *[D) echo left; return ;;
      *[C) echo right; return ;;
      *[2~) echo insert; return ;;
      *[1~) echo home; return ;;
      *[5~) echo pgup; return ;;
      *[3~) echo delete; return ;;
      *[4~) echo end; return ;;
      *[6~) echo pgdn; return ;;
      *$'\e') echo esc; return ;;
    esac
  done
}

echo "Interactive mode. Press 'Q' to exit"

while :; do
    key=$(readKey)
    case $key in
        q) exit;;
        home) executeCommand $home ;;
        enter) executeCommand $enter ;;
        esc) executeCommand $exit ;;
        up) executeCommand $up ;;
        down) executeCommand $down ;;
        left) executeCommand $left ;;
        right) executeCommand $right ;;
        *) echo "Unknown command: $key"
    esac
done
